//******************************************************************************
//   MSP430G2xx3 Demo - USCI_B0, I2C Master multiple byte TX/RX
//
//   Description: I2C master communicates to I2C slave sending and receiving
//   3 different messages of different length. I2C master will enter LPM0 mode
//   while waiting for the messages to be sent/receiving using I2C interrupt.
//   ACLK = NA, MCLK = SMCLK = DCO 16MHz.
//
//
//                   MSP430G2553         3.3V
//                 -----------------   /|\ /|\
//            /|\ |                 |   |  4.7k
//             |  |                 |  4.7k |
//             ---|RST              |   |   |
//                |                 |   |   |
//                |             P1.6|---|---+- I2C Clock (UCB0SCL)
//                |                 |   |
//                |             P1.7|---+----- I2C Data (UCB0SDA)
//                |                 |
//                |                 |
//
//   Nima Eskandari
//   Texas Instruments Inc.
//   April 2017
//   Built with CCS V7.0
//******************************************************************************

#include <msp430.h>
#include <stdint.h>
#include <stdbool.h>

//******************************************************************************
// Example Commands ************************************************************
//******************************************************************************

#define SLAVE_ADDR  0x80

/* CMD_TYPE_X_SLAVE are example commands the master sends to the slave.
 * The slave will send example SlaveTypeX buffers in response.
 *
 * CMD_TYPE_X_MASTER are example commands the master sends to the slave.
 * The slave will initialize itself to receive MasterTypeX example buffers.
 * */

#define CMD_TYPE_0_SLAVE      0
#define CMD_TYPE_1_SLAVE      1
#define CMD_TYPE_2_SLAVE      2

#define CMD_TYPE_0_MASTER      0xFE
#define CMD_TYPE_1_MASTER      4
#define CMD_TYPE_2_MASTER      5

#define TYPE_0_LENGTH   1
#define TYPE_1_LENGTH   2
#define TYPE_2_LENGTH   6

#define MAX_BUFFER_SIZE     20

/* MasterTypeX are example buffers initialized in the master, they will be
 * sent by the master to the slave.
 * SlaveTypeX are example buffers initialized in the slave, they will be
 * sent by the slave to the master.
 * */

uint8_t MasterType2[TYPE_2_LENGTH] = { 'F', '4', '1', '9', '2', 'B' };
uint8_t MasterType1[TYPE_1_LENGTH] = { 8, 9 };
uint8_t MasterType0[TYPE_0_LENGTH] = { 0 };

uint8_t SlaveType2[TYPE_2_LENGTH] = { 0 };
uint8_t SlaveType1[TYPE_1_LENGTH] = { 0 };
uint8_t SlaveType0[TYPE_0_LENGTH] = { 0 };

//******************************************************************************
// General I2C State Machine ***************************************************
//******************************************************************************

typedef enum I2C_ModeEnum
{
    IDLE_MODE,
    NACK_MODE,
    TX_REG_ADDRESS_MODE,
    RX_REG_ADDRESS_MODE,
    TX_DATA_MODE,
    RX_DATA_MODE,
    SWITCH_TO_RX_MODE,
    SWITHC_TO_TX_MODE,
    TIMEOUT_MODE
} I2C_Mode;

/* Used to track the state of the software state machine*/
volatile I2C_Mode MasterMode = IDLE_MODE;

/* The Register Address/Command to use*/
uint8_t TransmitRegAddr = 0;

/* ReceiveBuffer: Buffer used to receive data in the ISR
 * RXByteCtr: Number of bytes left to receive
 * ReceiveIndex: The index of the next byte to be received in ReceiveBuffer
 * TransmitBuffer: Buffer used to transmit data in the ISR
 * TXByteCtr: Number of bytes left to transfer
 * TransmitIndex: The index of the next byte to be transmitted in TransmitBuffer
 * */
volatile uint8_t ReceiveBuffer[MAX_BUFFER_SIZE] = { 0 };
volatile int RXByteCtr = 0;
volatile int ReceiveIndex = 0;
volatile uint8_t TransmitBuffer[MAX_BUFFER_SIZE] = { 0 };
volatile int TXByteCtr = 0;
volatile int TransmitIndex = 0;

/* I2C Write and Read Functions */

/* For slave device with dev_addr, writes the data specified in *reg_data
 *
 * dev_addr: The slave device address.
 *           Example: SLAVE_ADDR
 * reg_addr: The register or command to send to the slave.
 *           Example: CMD_TYPE_0_MASTER
 * *reg_data: The buffer to write
 *           Example: MasterType0
 * count: The length of *reg_data
 *           Example: TYPE_0_LENGTH
 *  */
I2C_Mode I2C_Master_WriteReg(uint8_t dev_addr, uint8_t reg_addr,
                             uint8_t *reg_data, uint8_t count);

/* For slave device with dev_addr, read the data specified in slaves reg_addr.
 * The received data is available in ReceiveBuffer
 *
 * dev_addr: The slave device address.
 *           Example: SLAVE_ADDR
 * reg_addr: The register or command to send to the slave.
 *           Example: CMD_TYPE_0_SLAVE
 * count: The length of data to read
 *           Example: TYPE_0_LENGTH
 *  */
I2C_Mode I2C_Master_ReadReg(uint8_t dev_addr, uint8_t reg_addr, uint8_t count);
void CopyArray(uint8_t *source, uint8_t *dest, uint8_t count);
I2C_Mode I2C_Master_Write_ReadReg(uint8_t dev_addr, uint8_t reg_addr,
                                  uint8_t count);

I2C_Mode I2C_Master_ReadReg(uint8_t dev_addr, uint8_t reg_addr, uint8_t count)
{
    /* Initialize state machine */
    MasterMode = TX_REG_ADDRESS_MODE;
    TransmitRegAddr = reg_addr;
    RXByteCtr = count;
    TXByteCtr = 0;
    ReceiveIndex = 0;
    TransmitIndex = 0;

    /* Initialize slave address and interrupts */
    UCB0I2CSA = dev_addr;
    IFG2 &= ~(UCB0TXIFG + UCB0RXIFG);       // Clear any pending interrupts
    IE2 &= ~UCB0RXIE;                       // Disable RX interrupt
    IE2 |= UCB0TXIE;                        // Enable TX interrupt

    UCB0CTL1 |= UCTR + UCTXSTT;             // I2C TX, start condition
    __bis_SR_register(CPUOFF + GIE);              // Enter LPM0 w/ interrupts

    return MasterMode;

}

I2C_Mode I2C_Master_WriteReg(uint8_t dev_addr, uint8_t reg_addr,
                             uint8_t *reg_data, uint8_t count)
{
    /* Initialize state machine */
    MasterMode = TX_REG_ADDRESS_MODE;
    TransmitRegAddr = reg_addr;

    //Copy register data to TransmitBuffer
    CopyArray(reg_data, TransmitBuffer, count);

    TXByteCtr = count;
    RXByteCtr = 0;
    ReceiveIndex = 0;
    TransmitIndex = 0;

    /* Initialize slave address and interrupts */
    UCB0I2CSA = dev_addr;
    IFG2 &= ~(UCB0TXIFG + UCB0RXIFG);       // Clear any pending interrupts
    IE2 &= ~UCB0RXIE;                       // Disable RX interrupt
    IE2 |= UCB0TXIE;                        // Enable TX interrupt

    UCB0CTL1 |= UCTR + UCTXSTT;             // I2C TX, start condition
    __bis_SR_register(CPUOFF + GIE);              // Enter LPM0 w/ interrupts

    return MasterMode;
}

I2C_Mode I2C_Master_Write_ReadReg(uint8_t dev_addr, uint8_t reg_addr,
                                  uint8_t count)
{
    /* Initialize state machine */
    MasterMode = TX_REG_ADDRESS_MODE;
    TransmitRegAddr = reg_addr;

    TXByteCtr = 1;
    RXByteCtr = count;
    ReceiveIndex = 0;
    TransmitIndex = 0;

    /* Initialize slave address and interrupts */
    UCB0I2CSA = dev_addr;
    IFG2 &= ~(UCB0TXIFG + UCB0RXIFG);       // Clear any pending interrupts
    IE2 &= ~UCB0RXIE;                       // Disable RX interrupt
    IE2 |= UCB0TXIE;                        // Enable TX interrupt

    UCB0CTL1 |= UCTR + UCTXSTT;             // I2C TX, start condition
    __bis_SR_register(CPUOFF + GIE);              // Enter LPM0 w/ interrupts

    return MasterMode;
}

void CopyArray(uint8_t *source, uint8_t *dest, uint8_t count)
{
    uint8_t copyIndex = 0;
    for (copyIndex = 0; copyIndex < count; copyIndex++)
    {
        dest[copyIndex] = source[copyIndex];
    }
}

//******************************************************************************
// Device Initialization *******************************************************
//******************************************************************************

void initClockTo16MHz()
{
    /*if (CALBC1_16MHZ == 0xFF)                  // If calibration constant erased
     {
     while (1)
     ;                               // do not load, trap CPU!!
     }
     DCOCTL = 0;                          // Select lowest DCOx and MODx settings
     BCSCTL1 = CALBC1_16MHZ;                    // Set DCO
     DCOCTL = CALDCO_16MHZ;*/

    BCSCTL1 |= BIT7; //turn off XT2 oscillator
    BCSCTL3 |= BIT5; //LFXT1Sx - when XTS is 0, 0b10 on bit 5-4 is VLOCLK
}

void initGPIO()
{
    P1DIR |= BIT0 + BIT1 + BIT2 + BIT3 + BIT4;
    P1OUT &= ~(BIT0 + BIT1 + BIT2 + BIT3 + BIT4);
}

void initI2C()
{
    /*UCB0CTL1 |= UCSWRST;                      // Enable SW reset
     UCB0CTL0 = UCMST + UCMODE_3 + UCSYNC;     // I2C Master, synchronous mode
     UCB0CTL1 = UCSSEL_2 + UCSWRST;            // Use SMCLK, keep SW reset
     UCB0BR0 = 160;                            // fSCL = SMCLK/160 = ~100kHz
     UCB0BR1 = 0;
     UCB0I2CSA = SLAVE_ADDR;                   // Slave Address
     UCB0CTL1 &= ~UCSWRST;                    // Clear SW reset, resume operation
     UCB0I2CIE |= UCNACKIE;*/

    //Set UCSWRST bit
    UCB0CTL1 |= BIT0;

    //USCI CTL0 configuration
    /* 7-bit address, single master environment
     * BIT3 = master mode
     * BIT2 | BIT1 = I2C mode
     * BIT0 = synchronous mode
     */
    uint8_t I2C_CTL0_value = 0x0;
    I2C_CTL0_value |= BIT3 | BIT2 | BIT1 | BIT0;
    UCB0CTL0 = I2C_CTL0_value;

    //CTL1 configuration
    /* BIT6 = ACLK
     * BIT4 = Transmitter
     */
    uint8_t I2C_CTL1_value = 0x0;
    I2C_CTL1_value = BIT6 | BIT4;
    UCB0CTL1 = I2C_CTL1_value;

    //Frequency configuration: whatever VLO is, divide by 10
    UCB0BR0 = 10;

    UCB0I2CSA = SLAVE_ADDR;

    //Configure ports as SCL and SDA
    P1SEL |= BIT6 | BIT7; //1.6: SCL 1.7: SDA
    P1SEL2 |= BIT6 | BIT7;

    //Clear UCSWRST
    UCB0CTL1 &= ~BIT0;

    UCB0I2CIE |= UCNACKIE;
}

//******************************************************************************
// Main ************************************************************************
// Send and receive three messages containing the example commands *************
//******************************************************************************

int main(void)
{

    WDTCTL = WDTPW | WDTHOLD;                 // Stop watchdog timer

    initClockTo16MHz();
    initGPIO();
    initI2C();

    uint8_t hw_reg[2] = { 0x0, 0 };

    __delay_cycles(1000);
    //I2C_Master_WriteReg(SLAVE_ADDR, CMD_TYPE_0_MASTER, MasterType0, TYPE_0_LENGTH);
    I2C_Master_ReadReg(0x60, 0x00, 1); //check version

    hw_reg[0] = 0;
    I2C_Master_WriteReg(0x60, 0x8, hw_reg, 1); //write 0 to MEAS_RATE0
    I2C_Master_WriteReg(0x60, 0x9, hw_reg, 1); //write 0 to MEAS_RATE1
    I2C_Master_WriteReg(0x60, 0x4, hw_reg, 1); //write 0 to IRQ_ENABLE
    I2C_Master_WriteReg(0x60, 0x5, hw_reg, 1); //write 0 to ??
    I2C_Master_WriteReg(0x60, 0x6, hw_reg, 1); //write 0 to ??
    I2C_Master_WriteReg(0x60, 0x3, hw_reg, 1); //write 0 to INT_CFG
    _delay_cycles(100);

    hw_reg[0] = 0XFF;
    I2C_Master_WriteReg(0x60, 0x21, hw_reg, 1); //write 0xff to IRQ_STATUS
    _delay_cycles(100);

    hw_reg[0] = 0x1;
    I2C_Master_WriteReg(0x60, 0x18, hw_reg, 1); //write 0x1 to CMD
    _delay_cycles(10000);

    hw_reg[0] = 0x17;
    I2C_Master_WriteReg(0x60, 0x7, hw_reg, 1); //write 0X17 to HW_KEY
    _delay_cycles(10000);

    hw_reg[0] = 0x29;
    I2C_Master_WriteReg(0x60, 0x13, hw_reg, 1); //Write 0x29 to UCOEF0

    hw_reg[0] = 0x89;
    I2C_Master_WriteReg(0x60, 0x14, hw_reg, 1); //Write 0x89 to UCOEF1

    hw_reg[0] = 0x2;
    I2C_Master_WriteReg(0x60, 0x15, hw_reg, 1); //Write 0x2 to UCOEF2

    hw_reg[0] = 0x0;
    I2C_Master_WriteReg(0x60, 0x16, hw_reg, 1); //Write 0x0 to UCOEF3

    hw_reg[0] = 0xB1;
    I2C_Master_WriteReg(0x60, 0x17, hw_reg, 1); //Write 0xB1 to PARAM_WR

    hw_reg[0] = 0xA1;
    I2C_Master_WriteReg(0x60, 0x18, hw_reg, 1); //Write 0xA1 to COMMAND

    I2C_Master_ReadReg(0x60, 0x2E, 1); //read PARAM_RD, (got 0xB1)

    hw_reg[0] = 0x3;
    I2C_Master_WriteReg(0x60, 0x17, hw_reg, 1); //Write 0x3 to PARAM_WR

    hw_reg[0] = 0xA7;
    I2C_Master_WriteReg(0x60, 0x18, hw_reg, 1); //Write 0xA7 to COMMAND

    I2C_Master_ReadReg(0x60, 0x2E, 1); //read PARAM_RD, (got 0x3)

    hw_reg[0] = 0x3;
    I2C_Master_WriteReg(0x60, 0x0F, hw_reg, 1); //Write 0x3 to PS_LED21

    hw_reg[0] = 0x1;
    I2C_Master_WriteReg(0x60, 0x17, hw_reg, 1); //Write 0x1 to PARAM_WR

    hw_reg[0] = 0xA2;
    I2C_Master_WriteReg(0x60, 0x18, hw_reg, 1); //Write 0xA2 to COMMAND

    I2C_Master_ReadReg(0x60, 0x2E, 1); //read PARAM_RD, (got 0x1)

    hw_reg[0] = 0x0;
    I2C_Master_WriteReg(0x60, 0x17, hw_reg, 1); //Write 0x0 to PARAM_WR

    hw_reg[0] = 0xAB;
    I2C_Master_WriteReg(0x60, 0x18, hw_reg, 1); //Write 0xAB to COMMAND

    I2C_Master_ReadReg(0x60, 0x2E, 1); //read PARAM_RD, (got 0x0)

    hw_reg[0] = 0x7;
    I2C_Master_WriteReg(0x60, 0x17, hw_reg, 1); //Write 0x7 to PARAM_WR

    hw_reg[0] = 0xAA;
    I2C_Master_WriteReg(0x60, 0x18, hw_reg, 1); //Write 0xAA to COMMAND

    I2C_Master_ReadReg(0x60, 0x2E, 1); //read PARAM_RD, (got 0x7)

    hw_reg[0] = 0x24;
    I2C_Master_WriteReg(0x60, 0x17, hw_reg, 1); //Write 0x24 to PARAM_WR

    hw_reg[0] = 0xAC;
    I2C_Master_WriteReg(0x60, 0x18, hw_reg, 1); //Write 0xAC to COMMAND

    I2C_Master_ReadReg(0x60, 0x2E, 1); //read PARAM_RD, (got 0x24)

    hw_reg[0] = 0x0;
    I2C_Master_WriteReg(0x60, 0x17, hw_reg, 1); //Write 0x0 to PARAM_WR

    hw_reg[0] = 0xB1;
    I2C_Master_WriteReg(0x60, 0x18, hw_reg, 1); //Write 0xB1 to COMMAND

    I2C_Master_ReadReg(0x60, 0x2E, 1); //read PARAM_RD, (got 0x0)

    hw_reg[0] = 0x7;
    I2C_Master_WriteReg(0x60, 0x17, hw_reg, 1); //Write 0x7 to PARAM_WR

    hw_reg[0] = 0xB0;
    I2C_Master_WriteReg(0x60, 0x18, hw_reg, 1); //Write 0xB0 to COMMAND

    I2C_Master_ReadReg(0x60, 0x2E, 1); //read PARAM_RD, (got 0x7)

    hw_reg[0] = 0x20;
    I2C_Master_WriteReg(0x60, 0x17, hw_reg, 1); //Write 0x20 to PARAM_WR

    hw_reg[0] = 0xB2;
    I2C_Master_WriteReg(0x60, 0x18, hw_reg, 1); //Write 0xB2 to COMMAND

    I2C_Master_ReadReg(0x60, 0x2E, 1); //read PARAM_RD, (got 0x20)

    hw_reg[0] = 0x0;
    I2C_Master_WriteReg(0x60, 0x17, hw_reg, 1); //Write 0x0 to PARAM_WR

    hw_reg[0] = 0xBE;
    I2C_Master_WriteReg(0x60, 0x18, hw_reg, 1); //Write 0xBE to COMMAND

    I2C_Master_ReadReg(0x60, 0x2E, 1); //read PARAM_RD, (got 0x0)

    hw_reg[0] = 0x7;
    I2C_Master_WriteReg(0x60, 0x17, hw_reg, 1); //Write 0x7 to PARAM_WR

    hw_reg[0] = 0xBD;
    I2C_Master_WriteReg(0x60, 0x18, hw_reg, 1); //Write 0xBD to COMMAND

    I2C_Master_ReadReg(0x60, 0x2E, 1); //read PARAM_RD, (got 0x7)

    hw_reg[0] = 0x20;
    I2C_Master_WriteReg(0x60, 0x17, hw_reg, 1); //Write 0x20 to PARAM_WR

    hw_reg[0] = 0xBF;
    I2C_Master_WriteReg(0x60, 0x18, hw_reg, 1); //Write 0xBF to COMMAND

    I2C_Master_ReadReg(0x60, 0x2E, 1); //read PARAM_RD, (got 0x20)

    hw_reg[0] = 0x1;
    I2C_Master_WriteReg(0x60, 0x3, hw_reg, 1); //Write 0x1 to INT_CFG
    I2C_Master_WriteReg(0x60, 0x4, hw_reg, 1); //Write 0x1 to IRQ_ENABLE

    hw_reg[0] = 0xFF;
    I2C_Master_WriteReg(0x60, 0x8, hw_reg, 1); //Write 0xFF to MEAS_RATE0

    hw_reg[0] = 0xF;
    I2C_Master_WriteReg(0x60, 0x18, hw_reg, 1); //Write 0xF to COMMAND

    __delay_cycles(100);

    while (1)
    {

        I2C_Master_ReadReg(0x60, 0x22, 2); //read VIS_DATA

        __delay_cycles(100);

        I2C_Master_ReadReg(0x60, 0x24, 2); //read VIS_DATA

        __delay_cycles(100);

        I2C_Master_ReadReg(0x60, 0x2C, 2); //read VIS_DATA

        __delay_cycles(100000);

        //__bis_SR_register(LPM0_bits + GIE);
    }
    return 0;
}

//******************************************************************************
// I2C Interrupt For Received and Transmitted Data******************************
//******************************************************************************

#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector = USCIAB0TX_VECTOR
__interrupt void USCIAB0TX_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(USCIAB0TX_VECTOR))) USCIAB0TX_ISR (void)
#else
#error Compiler not supported!
#endif
{
    if (IFG2 & UCB0RXIFG)                 // Receive Data Interrupt
    {
        //Must read from UCB0RXBUF
        uint8_t rx_val = UCB0RXBUF;

        if (RXByteCtr)
        {
            ReceiveBuffer[ReceiveIndex++] = rx_val;
            RXByteCtr--;
        }

        if (RXByteCtr == 1)
        {
            UCB0CTL1 |= UCTXSTP;
        }
        else if (RXByteCtr == 0)
        {
            IE2 &= ~UCB0RXIE;
            MasterMode = IDLE_MODE;
            __bic_SR_register_on_exit(CPUOFF);      // Exit LPM0
        }
    }
    else if (IFG2 & UCB0TXIFG)            // Transmit Data Interrupt
    {
        switch (MasterMode)
        {
        case TX_REG_ADDRESS_MODE:
            UCB0TXBUF = TransmitRegAddr;
            if (RXByteCtr)
                MasterMode = SWITCH_TO_RX_MODE;   // Need to start receiving now
            else
                MasterMode = TX_DATA_MODE; // Continue to transmision with the data in Transmit Buffer
            break;

        case SWITCH_TO_RX_MODE:
            IE2 |= UCB0RXIE;              // Enable RX interrupt
            IE2 &= ~UCB0TXIE;             // Disable TX interrupt
            UCB0CTL1 &= ~UCTR;            // Switch to receiver
            MasterMode = RX_DATA_MODE;    // State state is to receive data
            UCB0CTL1 |= UCTXSTT;          // Send repeated start
            if (RXByteCtr == 1)
            {
                //Must send stop since this is the N-1 byte
                while ((UCB0CTL1 & UCTXSTT))
                    ;
                UCB0CTL1 |= UCTXSTP;      // Send stop condition
            }
            break;

        case TX_DATA_MODE:
            if (TXByteCtr)
            {
                UCB0TXBUF = TransmitBuffer[TransmitIndex++];
                TXByteCtr--;
            }
            else
            {
                //Done with transmission
                UCB0CTL1 |= UCTXSTP;     // Send stop condition
                MasterMode = IDLE_MODE;
                IE2 &= ~UCB0TXIE;                       // disable TX interrupt
                __bic_SR_register_on_exit(CPUOFF);      // Exit LPM0
            }
            break;

        default:
            __no_operation();
            break;
        }
    }
}

//******************************************************************************
// I2C Interrupt For Start, Restart, Nack, Stop ********************************
//******************************************************************************

#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector = USCIAB0RX_VECTOR
__interrupt void USCIAB0RX_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(USCIAB0RX_VECTOR))) USCIAB0RX_ISR (void)
#else
#error Compiler not supported!
#endif
{
    if (UCB0STAT & UCNACKIFG)
    {
        UCB0STAT &= ~UCNACKIFG;             // Clear NACK Flags
    }
    if (UCB0STAT & UCSTPIFG)                        //Stop or NACK Interrupt
    {
        UCB0STAT &= ~(UCSTTIFG + UCSTPIFG + UCNACKIFG); //Clear START/STOP/NACK Flags
    }
    if (UCB0STAT & UCSTTIFG)
    {
        UCB0STAT &= ~(UCSTTIFG);                    //Clear START Flags
    }
}
