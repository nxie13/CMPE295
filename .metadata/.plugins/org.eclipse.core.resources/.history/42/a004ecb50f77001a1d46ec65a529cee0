/*
 * Main code (I2C) for CMPE295 Master Project
 * By Chong Hang Cheong and Nuoya Xie
 *
 *To get lowest power consumption possible:
 * 1. Configure all GPIO as output 0
 * 2. When no int signal is received, the MCU stays in LPM4, which consumes ~0.8uA
 * 3. (tentative) adding external chip such as TLV2760 between sensor and ADC
 *
 * This version of code should be used for sensors read with I2C. Another version
 * is for sensors read with adc
 *
 * UART Pins: P1.1(RXD) P1.2(TXD)
 * I2C pin: P1.6(SCL) P1.7(SDA)
 * UART Pins: P1.1(RXD) P1.2(TXD)
 * GPIO Trigger pin: P2.5
 * Debug LED pin: P2.0
 *
 * To send data over UART, firs byte will be identification
 * 0x01 - sunlight
 * 0x02 - UV
 * 0x03 - IR
 *
 * TODO: implement error LED for any possible bad situations (i2c setting not correct, etc.)
 */

#include <msp430.h>
#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include "temp_sensor.h"
#include "sunlight_sensor.h"

//#define SUNLIGHT 1 //Variable keep track of which sensor it is: sunlight or temp

void clock_init(void);
void port_init(void);

/**
 * main.c
 */
void main(void)
{
    clock_init();
    port_init();
    I2C_init();
    UART_init();
    __enable_interrupt(); //Enable interrupts

    P2IFG &= ~BIT5; //clear interrupt

#ifdef SUNLIGHT
    reset_sunlight_sensor();
    configure_sunlight_sensor();
#else
    temp_hum_soft_reset();
#endif

    while (1)
    {
        P2IE &= ~BIT5; //disable Interrupt

#ifdef SUNLIGHT  //if sunlight sensor is chosen
        uint16_t sunlight_value = read_sunlight_VIS();
        send_to_UART(VIS, sunlight_value);

        sunlight_value = read_sunlight_UV();
        send_to_UART(UV, sunlight_value);

        sunlight_value = read_sunlight_IR();
        send_to_UART(IR, sunlight_value);
        //P2OUT ^= BIT0; //turn on LED

#else //if temp sensor is chosen
        uint16_t temp_hum_data = get_temperature();
        send_to_UART(TEMP, temp_hum_data);
#endif

        P2IE |= BIT5; //Enable Interrupt
        LPM4; //go to lowest power mode
    }
}

//******************************************************************************
// GPIO Interrupt
//******************************************************************************
#pragma vector=PORT2_VECTOR
__interrupt void Port_2(void)
{
    //If interrupt signal comes from P2.5
    if (P2IFG & BIT5)
    {
        //P2OUT ^= BIT0; //turn on LED

        P2IFG &= ~BIT5; //Clear interrupt
        LPM4_EXIT;
    }
}

//******************************************************************************
// I2C/UART Interrupt For Received and Transmitted Data
//******************************************************************************
#pragma vector = USCIAB0TX_VECTOR
__interrupt void USCIAB0TX_ISR(void)
{
    if (IFG2 & UCB0RXIFG)                 // Receive Data Interrupt
    {
        //Must read from UCB0RXBUF
        uint8_t rx_val = UCB0RXBUF;

        if (RXByteCtr)
        {
            ReceiveBuffer[ReceiveIndex++] = rx_val;
            RXByteCtr--;
        }

        if (RXByteCtr == 1)
        {
            UCB0CTL1 |= UCTXSTP;
        }
        else if (RXByteCtr == 0)
        {
            IE2 &= ~UCB0RXIE;
            MasterMode = IDLE_MODE;
        }
    }
    else if (IFG2 & UCB0TXIFG)            // Transmit Data Interrupt
    {
        switch (MasterMode)
        {
        case TX_REG_CMD_MODE:
            UCB0TXBUF = TransmitRegAddr;
            if (RXByteCtr)
                MasterMode = SWITCH_TO_RX_MODE;   // Need to start receiving now
            else
                MasterMode = TX_DATA_MODE; // Continue to transmision with the data in Transmit Buffer
            break;

        case SWITCH_TO_RX_MODE:
            IE2 |= UCB0RXIE;              // Enable RX interrupt
            IE2 &= ~UCB0TXIE;             // Disable TX interrupt
            UCB0CTL1 &= ~UCTR;            // Switch to receiver
            MasterMode = RX_DATA_MODE;    // State state is to receive data
            UCB0CTL1 |= UCTXSTT;          // Send repeated start
            if (RXByteCtr == 1)
            {
                //Must send stop since this is the N-1 byte
                while ((UCB0CTL1 & UCTXSTT))
                    ;
                UCB0CTL1 |= UCTXSTP;      // Send stop condition
            }
            break;

        case TX_DATA_MODE:
            if (TXByteCtr)
            {
                UCB0TXBUF = TransmitBuffer[TransmitIndex++];
                TXByteCtr--;
            }
            else
            {
                //Done with transmission
                UCB0CTL1 |= UCTXSTP;     // Send stop condition
                MasterMode = IDLE_MODE;
                IE2 &= ~UCB0TXIE;                       // disable TX interrupt
            }
            break;

        default:
            __no_operation();
            break;
        }
    }
    if ((IFG2 & UCA0TXIFG) && (IE2 & UCA0TXIE))
    {
        if (UART_byte_count == 0)
        {
            UART_byte_count++;
        }
        else if (UART_byte_count == 1)
        {
            UCA0TXBUF = TransmitBuffer[UART_byte_count];
            UART_byte_count++;
        }
        else
        {
            UCA0TXBUF = TransmitBuffer[UART_byte_count];
            UART_byte_count = 0;
            IFG2 &= ~UCA0TXIFG;
            IE2 &= ~UCA0TXIE;
        }
    }
}

//******************************************************************************
// I2C/UART Interrupt For Start, Restart, Nack, Stop
//******************************************************************************
#pragma vector = USCIAB0RX_VECTOR
__interrupt void USCIAB0RX_ISR(void)
{
    if (UCB0STAT & UCNACKIFG)
    {
        UCB0STAT &= ~UCNACKIFG;             // Clear NACK Flags
    }
    if (UCB0STAT & UCSTPIFG)                        //Stop or NACK Interrupt
    {
        UCB0STAT &= ~(UCSTTIFG + UCSTPIFG + UCNACKIFG); //Clear START/STOP/NACK Flags

    }
    if (UCB0STAT & UCSTTIFG)
    {
        UCB0STAT &= ~(UCSTTIFG);                    //Clear START Flags
    }
}

